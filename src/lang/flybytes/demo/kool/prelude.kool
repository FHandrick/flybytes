// Copied from http://fsl.cs.illinois.edu/semantics/kool/prelude.kool with the author's explicit permission.

class Number is
  method + (n) is
    throw new MethodNotImplementedException("Number does not implement +");
  end

  method - (n) is
    throw new MethodNotImplementedException("Number does not implement -");
  end

  method * (n) is
    throw new MethodNotImplementedException("Number does not implement *");
  end

  method / (n) is
    throw new MethodNotImplementedException("Number does not implement /");
  end

  method % (n) is
    throw new MethodNotImplementedException("Number does not implement %");
  end

  method < (n) is
    throw new MethodNotImplementedException("Number does not implement <");
  end

  method <= (n) is
    throw new MethodNotImplementedException("Number does not implement <=");
  end

  method > (n) is
    throw new MethodNotImplementedException("Number does not implement >");
  end

  method >= (n) is
    throw new MethodNotImplementedException("Number does not implement >=");
  end

  method = (n) is
    throw new MethodNotImplementedException("Number does not implement =");
  end

  method != (n) is
    throw new MethodNotImplementedException("Number does not implement !=");
  end
end

primclass Integer extends Number is
  method + (n) is
    return primInvoke(1,self,n);
  end

  method - (n) is
    return primInvoke(2,self,n);
  end

  method * (n) is
    return primInvoke(3,self,n);
  end

  method / (n) is
    return primInvoke(4,self,n);
  end

  method % (n) is
    return primInvoke(5,self,n);
  end

  method < (n) is
    return primInvoke(6,self,n);
  end

  method <= (n) is
    return primInvoke(7,self,n);
  end

  method > (n) is
    return primInvoke(8,self,n);
  end

  method >= (n) is
    return primInvoke(9,self,n);
  end

  method = (n) is
    return primInvoke(10,self,n);
  end

  method != (n) is
    return primInvoke(11,self,n);
  end

  method toString is
    return primInvoke(12,self);
  end

  method inc is
    return self + 1;
  end
end

//
// A wrapper that allows us to have state -- normal integers
// are invariant.
//
class StatefulInteger extends Number is
  var int;

  method StatefulInteger(n) is
    int <- n;
  end

  method + (n) is
    return int + n;
  end

  method - (n) is
    return int - n;
  end

  method * (n) is
    return int * n;
  end

  method / (n) is
    return int / n;
  end

  method % (n) is
    return int % n;
  end

  method < (n) is
    return int < n;
  end

  method <= (n) is
    return int <= n;
  end

  method > (n) is
    return int > n;
  end

  method >= (n) is
    return int >= n;
  end

  method = (n) is
    return int = n;
  end

  method != (n) is
    return int != n;
  end

  method toString is
    return int.toString;
  end

  method inc is
    int <- int + 1;
    return int;
  end
end

primclass Float extends Number is
  method + (f) is
    return primInvoke(13,self,f);
  end

  method - (f) is
    return primInvoke(14,self,f);
  end

  method * (f) is
    return primInvoke(15,self,f);
  end

  method / (f) is
    return primInvoke(16,self,f);
  end

  method < (f) is
    return primInvoke(17,self,f);
  end

  method <= (f) is
    return primInvoke(18,self,f);
  end

  method > (f) is
    return primInvoke(19,self,f);
  end

  method >= (f) is
    return primInvoke(20,self,f);
  end

  method = (f) is
    return primInvoke(21,self,f);
  end

  method != (f) is
    return primInvoke(22,self,f);
  end

  method toString is
    return primInvoke(23,self);
  end
end

primclass Boolean extends Object is
  method toString is
    return primInvoke(24,self);
  end
end

class Console extends Object is
  method << (o) is
    primInvoke(25,o.toString);
    return self;
  end

  method readString is
    return primInvoke(26);
  end

  method readInteger is
    return primInvoke(27);
  end

  method readBoolean is
    return primInvoke(29);
  end

  method readFloat is
    return primInvoke(28);
  end
end

primclass String extends Object is
  method toString is
    return self;
  end

  method + (s) is
    return primInvoke(30,self,s);
  end

  method length is
    return primInvoke(31,self);
  end

  method toInteger is
    return primInvoke(32,self);
  end

  method toFloat is
    return primInvoke(33,self);
  end

  method toBoolean is
    return primInvoke(34,self);
  end
end

//
// We need to add some methods, and maybe some primitives,
// to the Char class still
//
primclass Char extends Object is

end

//
// Exception handling classes
//
class Exception extends Object is
  var msg;

  method Exception(s) is
    msg <- s;
  end
  
  method toString is
    return "Exception thrown: " + msg;
  end    
end

class NilPointerException extends Exception is
  method toString is
    return "NilPointerException thrown: " + msg;
  end    
end

class MethodNotFoundException extends Exception is
  method toString is
    return "MethodNotFoundException thrown: " + msg;
  end    
end

class InvalidSignatureException extends Exception is
  method toString is
    return "InvalidSignatureException thrown: " + msg;
  end    
end

class LockNotHeldException extends Exception is
  method toString is
    return "LockNotHeldException thrown: " + msg;
  end    
end

class MethodNotImplementedException extends Exception is
  method toString is
    return "MethodNotImplementedException thrown: " + msg;
  end    
end

class AssertException extends Exception is
  method toString is
    return "AssertException thrown: " + msg;
  end    
end

class OutOfBoundsException extends Exception is
  var indexTried, indexMax;

  method OutOfBoundsException(n,m) is
    indexTried <- n;
    indexMax <- m;
  end

  method toString is
    var s;
    if indexTried < 1 then
      s <- "OutOfBoundsException: lower bounds violation, tried to access index " + indexTried;
    else
      s <-  "OutOfBoundsException: upper bounds violation, tried to access index " + indexTried +
            " while upper bound is " + indexMax;
    fi
    return s;
  end    
end

class VectorSizeException extends Exception is
  var sizeTried;

  method VectorSizeException(n) is
    sizeTried <- n;
  end

  method toString is
    return "VectorSizeException: tried to allocate vector of size " + n;
  end
end

primclass Vector is

  method get(n) is
    return primInvoke(35,self,n);
  end

  method set(n,m) is
    return primInvoke(36,self,n,m);
  end
    
  method length is
    return primInvoke(38,self);
  end

  method flush(v) is
    var i;
    for i <- 1 to self.length do
      self.set(i,v);
    od
  end

end

class InvalidLookupException extends Exception is
  var fieldTried;

  method InvalidLookupException(ft) is
    fieldTried <- ft;
  end

  method toString is
    return "Attempt to look up invalid field " + fieldTried;
  end
end